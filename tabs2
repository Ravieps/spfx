<!-- Load jQuery and jQuery UI -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">

<style>
  .tab-btn-container { margin-bottom: 15px; }
  .edit-tabs-btn {
    padding: 6px 12px;
    background: #0078d4;
    color: white;
    border: none;
    border-radius: 3px;
    cursor: pointer;
  }
  .tab-header {
    display: flex;
    margin-bottom: 10px;
    gap: 6px;
  }
  .tab-header div {
    padding: 8px 15px;
    border-radius: 3px;
    background-color: #e0e0e0;
    cursor: pointer;
  }
  .tab-header .active {
    background-color: #0078d4;
    color: white;
  }
  .tab-content > div {
    display: none;
    margin-bottom: 20px;
  }
  .tab-content > div.active {
    display: block;
  }

  .tab-editor-modal, .tab-overlay {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    z-index: 9999;
  }
  .tab-overlay {
    background: rgba(0,0,0,0.5);
  }
  .tab-editor-modal {
    display: flex;
    justify-content: center;
    align-items: center;
    pointer-events: none;
  }
  .tab-editor-content {
    width: 700px;
    max-height: 90vh;
    background: white;
    padding: 20px;
    border-radius: 6px;
    overflow-y: auto;
    pointer-events: auto;
    position: relative;
  }
  .tab-config {
    margin-bottom: 20px;
    border: 1px solid #ccc;
    padding: 10px;
  }
  .field-list {
    min-height: 50px;
    border: 1px dashed #ccc;
    background: #fafafa;
    padding: 10px;
    margin-top: 5px;
  }
  .field-item {
    padding: 5px 10px;
    background: #eee;
    border: 1px solid #ccc;
    margin-bottom: 5px;
    cursor: move;
  }
  .tab-actions {
    margin-top: 10px;
  }
</style>

<script>
(function($) {
  $(document).ready(function() {
    const formType = getFormType();
    const listTitle = _spPageContextInfo.listTitle;
    const layoutKey = `TabLayout_${listTitle}_${formType}`;
    const formTable = $('table.ms-formtable');

    if (!formTable.length) return;

    const fieldMap = {};
    formTable.find('tr').each(function() {
      const label = $(this).find('td.ms-formlabel').text().trim().replace(':','');
      const body = $(this).find('td.ms-formbody');
      if (label && body.length) fieldMap[label] = $(this);
    });

    const allFields = Object.keys(fieldMap);
    let layout = JSON.parse(localStorage.getItem(layoutKey) || 'null');

    if (layout) renderTabs(layout);

    $('<div class="tab-btn-container"><button type="button" class="edit-tabs-btn">Edit Tabs</button></div>').insertBefore(formTable);
    $('.edit-tabs-btn').on('click', () => showEditor(layout));

    function renderTabs(layout) {
      const wrapper = $('<div></div>');
      const tabHeader = $('<div class="tab-header"></div>');
      const tabContent = $('<div class="tab-content"></div>');

      layout.forEach((tab, i) => {
        const tabId = `tab-${i}`;
        const tabBtn = $(`<div style="background-color:${tab.color}" data-tab="${tabId}">${tab.name}</div>`);
        const tabPane = $(`<div id="${tabId}"></div>`);

        tab.fields.forEach(field => {
          if (fieldMap[field]) tabPane.append(fieldMap[field]);
        });

        tabHeader.append(tabBtn);
        tabContent.append(tabPane);
      });

      wrapper.append(tabHeader).append(tabContent);
      formTable.before(wrapper);

      tabHeader.on('click', 'div', function() {
        const tabId = $(this).data('tab');
        tabHeader.find('div').removeClass('active');
        $(this).addClass('active');
        tabContent.find('> div').removeClass('active');
        $('#' + tabId).addClass('active');
      });

      tabHeader.find('div:first').click();
    }

    function showEditor(currentLayout) {
      $('.tab-overlay, .tab-editor-modal').remove();

      const overlay = $('<div class="tab-overlay"></div>');
      const modal = $('<div class="tab-editor-modal"><div class="tab-editor-content"></div></div>');
      const content = modal.find('.tab-editor-content');

      let tabs = currentLayout ? JSON.parse(JSON.stringify(currentLayout)) : [];
      let usedFields = tabs.flatMap(t => t.fields);
      let unassigned = allFields.filter(f => !usedFields.includes(f));

      function renderUI() {
        content.empty().append('<h3>Customize Tabs</h3>');

        tabs.forEach((tab, idx) => {
          const box = $(`
            <div class="tab-config">
              <input type="text" class="tab-name" value="${tab.name}" placeholder="Tab name">
              <input type="color" class="tab-color" value="${tab.color || '#f3f3f3'}">
              <button type="button" class="remove-tab">Delete</button>
              <div class="field-list" data-tab-index="${idx}"></div>
            </div>
          `);
          tab.fields.forEach(f => {
            box.find('.field-list').append(`<div class="field-item" data-name="${f}">${f}</div>`);
          });
          content.append(box);
        });

        const unassignedBox = $(`
          <div>
            <strong>Unassigned Fields</strong>
            <div class="field-list" data-tab-index="-1"></div>
          </div>
        `);
        unassigned.forEach(f => {
          unassignedBox.find('.field-list').append(`<div class="field-item" data-name="${f}">${f}</div>`);
        });
        content.append(unassignedBox);

        content.append(`
          <div class="tab-actions">
            <button type="button" class="add-tab">+ Add Tab</button>
            <button type="button" class="save-tabs">Save</button>
            <button type="button" class="close-tabs">Close</button>
          </div>
        `);

        setTimeout(() => {
          $('.field-list').sortable({
            connectWith: '.field-list',
            placeholder: 'field-placeholder'
          }).disableSelection();
        }, 0);
      }

      content.on('click', '.add-tab', () => {
        tabs.push({ name: 'New Tab', color: '#f3f3f3', fields: [] });
        renderUI();
      });

      content.on('click', '.remove-tab', function() {
        const idx = $(this).closest('.tab-config').find('.field-list').data('tab-index');
        const removedFields = tabs[idx].fields;
        unassigned = unassigned.concat(removedFields);
        tabs.splice(idx, 1);
        renderUI();
      });

      content.on('click', '.save-tabs', () => {
        tabs.forEach((tab, i) => {
          const cfg = content.find(`.field-list[data-tab-index="${i}"]`).closest('.tab-config');
          tab.name = cfg.find('.tab-name').val().trim() || `Tab ${i+1}`;
          tab.color = cfg.find('.tab-color').val();
          tab.fields = [];
          cfg.find('.field-list .field-item').each(function() {
            tab.fields.push($(this).data('name'));
          });
        });

        const newUnassigned = [];
        content.find(`.field-list[data-tab-index="-1"] .field-item`).each(function() {
          newUnassigned.push($(this).data('name'));
        });
        if (newUnassigned.length) {
          tabs.push({ name: "Other", color: "#f3f3f3", fields: newUnassigned });
        }

        localStorage.setItem(layoutKey, JSON.stringify(tabs));
        location.reload();
      });

      content.on('click', '.close-tabs', () => {
        modal.remove();
        overlay.remove();
      });

      $('body').append(overlay).append(modal);
      renderUI();
    }

    function getFormType() {
      const url = window.location.href;
      if (url.includes('NewForm.aspx')) return 'New';
      if (url.includes('EditForm.aspx')) return 'Edit';
      if (url.includes('DispForm.aspx')) return 'Display';
      return 'Unknown';
    }
  });
})(jQuery);
</script>
