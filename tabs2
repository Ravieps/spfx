<!-- Load jQuery and jQuery UI -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/smoothness/jquery-ui.css">

<style>
  .tab-editor { margin-bottom: 20px; }
  .tab-list { display: flex; margin-bottom: 10px; }
  .tab-item {
    padding: 8px 15px;
    background: #ddd;
    margin-right: 5px;
    cursor: pointer;
    border-radius: 3px;
  }
  .tab-item.active { font-weight: bold; background: #aaa; }
  .tab-content .tab-pane { display: none; }
  .tab-content .tab-pane.active { display: block; }

  .edit-tabs-btn {
    margin-bottom: 10px;
    background: #0078d4;
    color: #fff;
    border: none;
    padding: 7px 14px;
    border-radius: 3px;
    cursor: pointer;
  }

  .tab-config-modal {
    position: fixed;
    top: 5%;
    left: 50%;
    transform: translateX(-50%);
    background: #fff;
    border: 1px solid #ccc;
    padding: 20px;
    z-index: 9999;
    width: 600px;
    max-height: 90vh;
    overflow: auto;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
  }

  .tab-config-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.4);
    z-index: 9998;
  }

  .field-list {
    min-height: 50px;
    background: #f9f9f9;
    padding: 10px;
    border: 1px dashed #ccc;
    margin-top: 5px;
  }

  .field-item {
    padding: 5px 10px;
    background: #eee;
    border: 1px solid #ccc;
    margin-bottom: 5px;
    cursor: move;
  }

  .field-placeholder {
    background: #cfc;
    border: 1px dashed #080;
    height: 2em;
    margin-bottom: 5px;
  }

  .tab-settings {
    margin-bottom: 5px;
  }

  .tab-settings input[type="text"] {
    width: 120px;
    margin-right: 5px;
  }

  .tab-settings input[type="color"] {
    margin-right: 10px;
  }
</style>

<script>
(function($) {
  $(document).ready(function() {
    const formType = getFormType();
    const listTitle = _spPageContextInfo.listTitle;
    const layoutKey = `tabLayout-${_spPageContextInfo.webAbsoluteUrl}-${listTitle}-${formType}`;

    const fieldRows = {};
    const formTable = $('table.ms-formtable');
    if (!formTable.length) return;

    formTable.find('tr').each(function() {
      const labelCell = $(this).find('td.ms-formlabel');
      const fieldCell = $(this).find('td.ms-formbody');
      if (labelCell.length && fieldCell.length) {
        const fieldName = labelCell.text().trim().replace(':', '');
        if (fieldName) {
          fieldRows[fieldName] = $(this);
        }
      }
    });

    const savedLayout = localStorage.getItem(layoutKey);
    let layout = savedLayout ? JSON.parse(savedLayout) : null;
    if (layout) renderTabs(layout);

    const editBtn = $('<button type="button" class="edit-tabs-btn">Edit Tabs</button>');
    formTable.before(editBtn);

    editBtn.on('click', function() {
      showTabEditor(layout);
    });

    function renderTabs(layout) {
      const wrapper = $('<div class="tab-editor"></div>');
      const tabList = $('<div class="tab-list"></div>');
      const tabContent = $('<div class="tab-content"></div>');

      layout.forEach((tab, i) => {
        const tabId = `tab-${i}`;
        const tabBtn = $(`<div class="tab-item" style="background-color:${tab.color}" data-tab="${tabId}">${tab.name}</div>`);
        tabList.append(tabBtn);

        const tabPane = $(`<div class="tab-pane" id="${tabId}"></div>`);
        tab.fields.forEach(f => {
          if (fieldRows[f]) tabPane.append(fieldRows[f]);
        });
        tabContent.append(tabPane);
      });

      formTable.before(wrapper.append(tabList).append(tabContent));

      tabList.on('click', '.tab-item', function() {
        const tabId = $(this).data('tab');
        $('.tab-item').removeClass('active');
        $(this).addClass('active');
        $('.tab-pane').removeClass('active');
        $('#' + tabId).addClass('active');
      });

      $('.tab-item:first', tabList).click();
    }

    function showTabEditor(existingLayout) {
      $('.tab-config-modal, .tab-config-overlay').remove(); // cleanup
      const modal = $('<div class="tab-config-modal"></div>');
      const overlay = $('<div class="tab-config-overlay"></div>');
      const closeBtn = $('<button type="button">Close</button>');
      const saveBtn = $('<button type="button">Save</button>');

      const tabs = existingLayout ? JSON.parse(JSON.stringify(existingLayout)) : [];

      const unassigned = Object.keys(fieldRows).filter(f => {
        return !tabs.some(tab => tab.fields.includes(f));
      });

      const renderEditor = () => {
        modal.empty();
        modal.append('<h3>Edit Tabs</h3>');

        const tabControls = $('<div class="tab-controls"></div>');
        const addTabBtn = $('<button type="button">+ Add Tab</button>');
        tabControls.append(addTabBtn);
        modal.append(tabControls);

        const tabsArea = $('<div class="tab-editor-area"></div>');
        tabs.forEach((tab, i) => {
          const tabBox = $(`
            <div style="border:1px solid #ccc; padding:10px; margin-bottom:10px;">
              <div class="tab-settings">
                <input type="text" class="tab-name" value="${tab.name}" placeholder="Tab name">
                <input type="color" class="tab-color" value="${tab.color || '#f3f3f3'}">
                <button type="button" class="delete-tab">Delete</button>
              </div>
              <div class="field-list" data-tab-index="${i}"></div>
            </div>
          `);
          tab.fields.forEach(f => {
            tabBox.find('.field-list').append(`<div class="field-item" data-name="${f}">${f}</div>`);
          });
          tabsArea.append(tabBox);
        });

        modal.append(tabsArea);

        const unassignedBox = $('<div><strong>Unassigned Fields</strong><div class="field-list" data-tab-index="-1"></div></div>');
        unassigned.forEach(f => {
          unassignedBox.find('.field-list').append(`<div class="field-item" data-name="${f}">${f}</div>`);
        });
        modal.append(unassignedBox);

        modal.append('<br/>').append(saveBtn).append(' ').append(closeBtn);

        $('body').append(overlay).append(modal);

        setTimeout(() => {
          modal.find('.field-list').sortable({
            connectWith: '.field-list',
            placeholder: 'field-placeholder'
          }).disableSelection();
        }, 0);

        addTabBtn.on('click', () => {
          tabs.push({ name: "New Tab", color: "#f3f3f3", fields: [] });
          renderEditor();
        });

        modal.find('.delete-tab').on('click', function() {
          const idx = $(this).closest('div').find('.field-list').data('tab-index');
          const fieldsToReturn = tabs[idx].fields;
          unassigned.push(...fieldsToReturn);
          tabs.splice(idx, 1);
          renderEditor();
        });

        saveBtn.off().on('click', () => {
          tabs.forEach((tab, i) => {
            const container = modal.find(`[data-tab-index="${i}"]`).closest('div');
            tab.name = container.find('.tab-name').val() || `Tab ${i+1}`;
            tab.color = container.find('.tab-color').val();

            tab.fields = [];
            container.find('.field-list .field-item').each(function() {
              tab.fields.push($(this).data('name'));
            });
          });

          const newUnassigned = [];
          modal.find('[data-tab-index="-1"] .field-item').each(function() {
            newUnassigned.push($(this).data('name'));
          });

          if (newUnassigned.length > 0) {
            tabs.push({
              name: "Other",
              color: "#f3f3f3",
              fields: newUnassigned
            });
          }

          localStorage.setItem(layoutKey, JSON.stringify(tabs));
          location.reload();
        });

        closeBtn.on('click', () => {
          modal.remove();
          overlay.remove();
        });
      };

      renderEditor();
    }

    function getFormType() {
      const url = window.location.href;
      if (url.includes('NewForm.aspx')) return 'New';
      if (url.includes('EditForm.aspx')) return 'Edit';
      if (url.includes('DispForm.aspx')) return 'Display';
      return 'Unknown';
    }
  });
})(jQuery);
</script>
