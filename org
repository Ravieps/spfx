<style>
.org-chart-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 30px;
}
.search-container {
  text-align: center;
  margin-bottom: 20px;
}
.search-container input {
  padding: 8px 12px;
  font-size: 14px;
  border-radius: 6px;
  border: 1px solid #ccc;
  width: 250px;
}
.org-node {
  text-align: center;
  margin: 10px 0;
}
.card {
  border: 1px solid #ccc;
  border-radius: 12px;
  padding: 15px;
  background: white;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  display: inline-block;
  width: 180px;
  cursor: pointer;
  position: relative;
  transition: transform 0.3s ease;
}
.card:hover {
  transform: scale(1.05);
}
.card img {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
}
.card .name {
  font-weight: bold;
  margin-top: 10px;
}
.card .title {
  font-size: 13px;
  color: #666;
}
.card .count-badge {
  position: absolute;
  top: -10px;
  right: -10px;
  background: #1e90ff;
  color: white;
  font-size: 12px;
  padding: 5px 8px;
  border-radius: 50%;
}
.manager-team {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  margin-top: 20px;
}
.toggle-btn {
  font-size: 18px;
  color: #0078d4;
  cursor: pointer;
  margin-top: 6px;
}
.manager-block {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0 20px;
}
.manager-children {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 10px;
  display: none;
}

/* Modal */
.bio-modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0; top: 0;
  width: 100%; height: 100%;
  background-color: rgba(0,0,0,0.7);
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s ease;
}
.bio-modal.show {
  display: block;
  opacity: 1;
  visibility: visible;
}
.modal-content {
  background: white;
  margin: 10% auto;
  padding: 20px;
  width: 300px;
  border-radius: 10px;
  text-align: center;
  animation: slideIn 0.3s ease;
}
.modal-content img {
  width: 80px;
  height: 80px;
  border-radius: 50%;
}
.close-btn {
  float: right;
  font-size: 24px;
  cursor: pointer;
}
@keyframes slideIn {
  from { transform: translateY(-50px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}
</style>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search by name..." />
</div>

<div id="orgChartContainer" class="org-chart-wrapper"></div>

<div id="bioModal" class="bio-modal">
  <div class="modal-content">
    <span class="close-btn">&times;</span>
    <img id="modalImage" />
    <h2 id="modalTitle"></h2>
    <h4 id="modalJobTitle"></h4>
    <p id="modalBio"></p>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript">
(function () {
  const siteUrl = _spPageContextInfo.webAbsoluteUrl;
  const listName = 'rapidorg';
  let allPeople = {};

  $(document).ready(function () {
    fetchData();

    $('.close-btn').click(() => $('#bioModal').removeClass('show'));
    $(window).click(e => {
      if ($(e.target).is('#bioModal')) $('#bioModal').removeClass('show');
    });

    $('#searchInput').on('input', function () {
      const query = $(this).val().toLowerCase();
      if (!query) {
        renderOrgChart(allPeople);
        return;
      }

      const matched = {};
      const addWithHierarchy = (personName) => {
        const person = allPeople[personName];
        if (!person || matched[personName]) return;
        matched[personName] = person;
        if (person.manager) addWithHierarchy(person.manager);
      };

      Object.keys(allPeople).forEach(name => {
        if (name.toLowerCase().includes(query)) {
          addWithHierarchy(name);
        }
      });

      renderOrgChart(matched);
    });
  });

  function fetchData() {
    const url = siteUrl + "/_api/web/lists/getbytitle('" + listName + "')/items?$select=Title,JobTitle,Manager/Title,ImageUrl,Bio,Order&$expand=Manager&$orderby=Order asc";
    $.ajax({
      url: url,
      type: "GET",
      headers: { "Accept": "application/json;odata=verbose" },
      success: function (data) {
        const items = data.d.results;
        allPeople = processPeople(items);
        renderOrgChart(allPeople);
      },
      error: function (err) {
        console.error("Error fetching data from SharePoint list:", err);
      }
    });
  }

  function processPeople(items) {
    let people = {};
    items.forEach(person => {
      people[person.Title] = {
        name: person.Title,
        jobTitle: person.JobTitle,
        image: person.ImageUrl,
        bio: person.Bio,
        order: person.Order,
        manager: person.Manager ? person.Manager.Title : null,
        children: []
      };
    });
    Object.values(people).forEach(person => {
      if (person.manager && people[person.manager]) {
        people[person.manager].children.push(person.name);
      }
    });
    return people;
  }

  function renderOrgChart(people) {
    $('#orgChartContainer').empty();
    const exec = Object.values(people).find(p => !p.manager);
    if (!exec) return;

    const $chart = $('#orgChartContainer');
    const $execNode = createCard(exec, people);
    $chart.append($execNode);

    const $managerLine = $('<div class="manager-team"></div>');
    const managers = exec.children
      .map(name => people[name])
      .filter(Boolean)
      .sort((a, b) => a.order - b.order);

    managers.forEach(manager => {
      const $managerBlock = $('<div class="manager-block"></div>');
      const $managerNode = createCard(manager, people, true);
      $managerBlock.append($managerNode);

      const $childrenWrap = $('<div class="manager-children" id="team-' + manager.name.replace(/\s+/g, '') + '"></div>');
      $managerBlock.append($childrenWrap);
      $managerLine.append($managerBlock);

      const reportees = manager.children
        .map(name => people[name])
        .filter(Boolean)
        .sort((a, b) => a.name.localeCompare(b.name));

      reportees.forEach(reportee => {
        const $repCard = createCard(reportee, people);
        $childrenWrap.append($repCard);
      });

      $('#btn-' + manager.name.replace(/\s+/g, '')).click(function () {
        const $btn = $(this);
        $childrenWrap.slideToggle(300, function () {
          const isVisible = $childrenWrap.is(':visible');
          $btn.text(isVisible ? 'âˆ’' : '+');
        });
      });
    });

    $chart.append($managerLine);
  }

  function createCard(person, people, isManager = false) {
    const $card = $(`
      <div class="org-node" id="node-${person.name.replace(/\s+/g, '')}">
        <div class="card" data-name="${person.name}">
          <img src="${person.image}" />
          <div class="name">${person.name}</div>
          <div class="title">${person.jobTitle}</div>
        </div>
      </div>
    `);

    if (isManager && person.children.length > 0) {
      $card.find('.card').append(`<div class="count-badge">${person.children.length}</div>`);
      $card.append(`<div class="toggle-btn" id="btn-${person.name.replace(/\s+/g, '')}">+</div>`);
    }

    $card.find('.card').click(function (e) {
      if ($(e.target).hasClass('toggle-btn')) return;
      showBioModal(person);
    });

    return $card;
  }

  function showBioModal(person) {
    $('#modalImage').attr('src', person.image);
    $('#modalTitle').text(person.name);
    $('#modalJobTitle').text(person.jobTitle);
    $('#modalBio').text(person.bio);
    $('#bioModal').addClass('show');
  }
})();
</script>
