<style>
/* SAME STYLES AS BEFORE - abbreviated here for brevity */
.org-chart-wrapper {
  position: relative;
  padding: 30px;
}
svg.connector-lines {
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  pointer-events: none;
  overflow: visible;
  z-index: 0;
}
.org-node {
  position: relative;
  text-align: center;
  margin: 10px 0;
}
.card {
  position: relative;
  z-index: 1;
}
</style>

<div class="search-container">
  <input type="text" id="searchInput" placeholder="Search by name..." />
</div>

<div id="orgChartContainer" class="org-chart-wrapper">
  <svg class="connector-lines"></svg>
</div>

<!-- Modal -->
<div id="bioModal" class="bio-modal">
  <div class="modal-content">
    <span class="close-btn">&times;</span>
    <img id="modalImage" />
    <h2 id="modalTitle"></h2>
    <h4 id="modalJobTitle"></h4>
    <p id="modalBio"></p>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
(function () {
  const siteUrl = _spPageContextInfo.webAbsoluteUrl;
  const listName = 'rapidorg';
  let allPeople = {};

  $(document).ready(function () {
    fetchData();

    $('.close-btn').click(() => $('#bioModal').removeClass('show'));
    $(window).click(e => {
      if ($(e.target).is('#bioModal')) $('#bioModal').removeClass('show');
    });

    $('#searchInput').on('input', function () {
      const query = $(this).val().toLowerCase();
      if (!query) return renderOrgChart(allPeople);

      const matched = {};
      const addWithHierarchy = (name) => {
        if (!allPeople[name] || matched[name]) return;
        matched[name] = allPeople[name];
        if (allPeople[name].manager) addWithHierarchy(allPeople[name].manager);
      };
      Object.keys(allPeople).forEach(name => {
        if (name.toLowerCase().includes(query)) addWithHierarchy(name);
      });
      renderOrgChart(matched);
    });
  });

  function fetchData() {
    const url = `${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,JobTitle,Manager/Title,ImageUrl,Bio,Order&$expand=Manager&$orderby=Order asc`;
    $.ajax({
      url: url,
      headers: { Accept: "application/json;odata=verbose" },
      success: data => {
        const items = data.d.results;
        allPeople = processPeople(items);
        renderOrgChart(allPeople);
      },
      error: err => console.error("SharePoint fetch error:", err)
    });
  }

  function processPeople(items) {
    let people = {};
    items.forEach(p => {
      people[p.Title] = {
        name: p.Title,
        jobTitle: p.JobTitle,
        image: p.ImageUrl,
        bio: p.Bio,
        order: p.Order,
        manager: p.Manager ? p.Manager.Title : null,
        children: []
      };
    });
    Object.values(people).forEach(p => {
      if (p.manager && people[p.manager]) {
        people[p.manager].children.push(p.name);
      }
    });
    return people;
  }

  function renderOrgChart(people) {
    const $chart = $('#orgChartContainer').empty();
    const $svg = $('<svg class="connector-lines"></svg>').appendTo($chart);
    const exec = Object.values(people).find(p => !p.manager);
    if (!exec) return;

    const $execNode = createCard(exec, people).appendTo($chart);
    const $managerLine = $('<div class="manager-team"></div>').appendTo($chart);

    const managers = exec.children.map(name => people[name])
      .filter(Boolean)
      .sort((a, b) => a.order - b.order);

    let execCenter = null;
    let managerCenters = [];

    managers.forEach(manager => {
      const $block = $('<div class="manager-block"></div>').appendTo($managerLine);
      const $managerNode = createCard(manager, people, true).appendTo($block);
      const $childrenWrap = $('<div class="manager-children"></div>').appendTo($block);

      const children = manager.children.map(name => people[name])
        .filter(Boolean)
        .sort((a, b) => a.name.localeCompare(b.name));

      children.forEach(child => createCard(child, people).appendTo($childrenWrap));

      $childrenWrap.show();
      $managerNode.find('.toggle-btn').click(function () {
        const $btn = $(this);
        const isVisible = $childrenWrap.is(':visible');
        $childrenWrap.slideToggle(300);
        $btn.text(isVisible ? '+' : '−');
        setTimeout(() => drawConnections($chart[0], $svg[0]), 310);
      });
    });

    // Delay SVG draw after DOM layout
    setTimeout(() => drawConnections($chart[0], $svg[0]), 300);
  }

  function createCard(person, people, isManager = false) {
    const $card = $(`
      <div class="org-node">
        <div class="card" data-name="${person.name}">
          <img src="${person.image}" />
          <div class="name">${person.name}</div>
          <div class="title">${person.jobTitle}</div>
        </div>
      </div>
    `);
    if (isManager && person.children.length > 0) {
      $card.find('.card').append(`<div class="count-badge">${person.children.length}</div>`);
      $card.append(`<div class="toggle-btn">−</div>`);
    }
    $card.find('.card').click(e => {
      if ($(e.target).hasClass('toggle-btn')) return;
      showBioModal(person);
    });
    return $card;
  }

  function showBioModal(person) {
    $('#modalImage').attr('src', person.image);
    $('#modalTitle').text(person.name);
    $('#modalJobTitle').text(person.jobTitle);
    $('#modalBio').text(person.bio);
    $('#bioModal').addClass('show');
  }

  function drawConnections(container, svg) {
    const $svg = $(svg).empty();
    const ns = "http://www.w3.org/2000/svg";
    const offset = container.getBoundingClientRect();

    const getCenter = el => {
      const rect = el.getBoundingClientRect();
      return {
        x: rect.left + rect.width / 2 - offset.left,
        y: rect.top + rect.height / 2 - offset.top
      };
    };

    const allCards = $(container).find('.card');
    const nodes = {};
    allCards.each((_, el) => {
      const name = $(el).data('name');
      if (name) nodes[name] = getCenter(el);
    });

    for (const name in allPeople) {
      const person = allPeople[name];
      const parent = person.manager;
      if (parent && nodes[parent] && nodes[name]) {
        const from = nodes[parent];
        const to = nodes[name];

        const path = document.createElementNS(ns, "path");
        const d = `M ${from.x} ${from.y + 30} 
                   V ${from.y + ((to.y - from.y) / 2)} 
                   H ${to.x} 
                   V ${to.y - 30}`;
        path.setAttribute("d", d);
        path.setAttribute("stroke", "#999");
        path.setAttribute("stroke-width", "1.5");
        path.setAttribute("fill", "none");
        $svg.append(path);
      }
    }
  }
})();
</script>
