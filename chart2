<style>
  /* Add this inside your existing <style> block or include it */
  .reportee-count {
    position: absolute;
    top: 4px;
    right: 6px;
    background: #f44336;
    color: white;
    font-size: 11px;
    padding: 2px 6px;
    border-radius: 12px;
  }

  .children-container.collapsed {
    display: none !important;
  }

  .toggleable::after {
    content: '+';
    position: absolute;
    bottom: -10px;
    left: 50%;
    transform: translateX(-50%);
    background: #0b2e59;
    color: white;
    padding: 2px 6px;
    border-radius: 10px;
    font-size: 12px;
    cursor: pointer;
  }

  .toggleable.expanded::after {
    content: 'âˆ’';
  }
</style>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", function () {
    const listName = "rapidorg";
    const siteUrl = _spPageContextInfo.webAbsoluteUrl;

    function getData(callback) {
      const url = `${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,JobTitle,Manager,ImageUrl,Bio&$top=5000`;
      fetch(url, {
        method: "GET",
        headers: { "Accept": "application/json;odata=verbose" }
      })
      .then(res => res.json())
      .then(data => callback(data.d.results));
    }

    function buildHierarchy(data) {
      const map = {}, roots = [];
      data.forEach(person => { person.children = []; map[person.Title] = person; });
      data.forEach(person => {
        if (person.Manager) {
          const mgr = map[person.Manager];
          if (mgr) mgr.children.push(person);
        } else {
          roots.push(person);
        }
      });
      return roots;
    }

    function createCard(person, isManager = false) {
      const card = document.createElement("div");
      card.className = "tree-card";
      if (isManager) card.classList.add("toggleable");

      const countBadge = isManager && person.children.length > 0
        ? `<div class="reportee-count">${person.children.length}</div>` : '';

      card.innerHTML = `
        ${countBadge}
        <img src="${person.ImageUrl || 'https://via.placeholder.com/40'}" />
        <h4>${person.Title}</h4>
        <p>${person.JobTitle || ''}</p>
      `;

      card.onclick = (e) => {
        e.stopPropagation();
        showModal(person);
      };

      return card;
    }

    function renderNode(person, collapsed = false) {
      const container = document.createElement("div");
      container.className = "tree-node";

      const isManager = person.children.length > 0;
      const card = createCard(person, isManager);
      container.appendChild(card);

      if (isManager) {
        const childrenWrapper = document.createElement("div");
        childrenWrapper.className = "children-container";
        if (collapsed) childrenWrapper.classList.add("collapsed");

        person.children.sort((a, b) => a.Title.localeCompare(b.Title));

        const connector = document.createElement("div");
        connector.className = "connector-line";
        childrenWrapper.appendChild(connector);

        person.children.forEach(child => {
          childrenWrapper.appendChild(renderNode(child));
        });

        container.appendChild(childrenWrapper);

        // Toggle expand/collapse
        card.addEventListener("click", (e) => {
          e.stopPropagation();
          childrenWrapper.classList.toggle("collapsed");
          card.classList.toggle("expanded");
        });
      }

      return container;
    }

    function renderOrgChart(data) {
      const tree = buildHierarchy(data);
      const executive = tree.find(p => !p.Manager);

      const chartContainer = document.getElementById("orgChart");
      chartContainer.innerHTML = "";

      if (executive) {
        // Show Executive
        const execNode = renderNode(executive, false);
        chartContainer.appendChild(execNode);

        // Manager row under Executive
        const managerRow = document.createElement("div");
        managerRow.className = "manager-row";

        executive.children.forEach(manager => {
          managerRow.appendChild(renderNode(manager, true)); // collapsed = true
        });

        chartContainer.appendChild(managerRow);
      }
    }

    function showModal(person) {
      document.getElementById("modalImage").src = person.ImageUrl || 'https://via.placeholder.com/80';
      document.getElementById("modalName").textContent = person.Title;
      document.getElementById("modalTitle").textContent = person.JobTitle;
      document.getElementById("modalBio").textContent = person.Bio || "No bio available.";
      document.getElementById("bioModal").style.display = "block";
    }

    document.querySelector(".close").onclick = () => {
      document.getElementById("bioModal").style.display = "none";
    };

    window.onclick = function (e) {
      if (e.target === document.getElementById("bioModal")) {
        document.getElementById("bioModal").style.display = "none";
      }
    };

    getData(renderOrgChart);
  });
</script>
