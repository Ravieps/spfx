<div id="orgChart" class="org-chart-container"></div>

<!-- Modal for Bio -->
<div id="bioModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <img id="modalImage" />
    <h3 id="modalName"></h3>
    <h4 id="modalTitle"></h4>
    <p id="modalBio"></p>
  </div>
</div>

<style>
  .org-chart-container {
    text-align: center;
    padding: 40px;
    font-family: 'Segoe UI', sans-serif;
  }

  .tree-node {
    display: inline-block;
    vertical-align: top;
    text-align: center;
    margin: 20px;
    position: relative;
    min-width: 150px;
  }

  .tree-card {
    background-color: #0b2e59;
    color: white;
    padding: 10px;
    border-radius: 6px;
    cursor: pointer;
    width: 160px;
    transition: background 0.3s ease;
  }

  .tree-card:hover {
    background-color: #155ca3;
  }

  .tree-card img {
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: 50%;
    margin-right: 10px;
    float: left;
  }

  .tree-card h4, .tree-card p {
    margin: 0;
    font-size: 13px;
    text-align: left;
  }

  .children-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    position: relative;
    margin-top: 30px;
  }

  .connector-line {
    width: 2px;
    height: 30px;
    background-color: #999;
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
  }

  .manager-row {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
  }

  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0; top: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.7);
  }

  .modal-content {
    background: white;
    padding: 20px;
    margin: 80px auto;
    border-radius: 10px;
    width: 400px;
    text-align: center;
  }

  .modal-content img {
    width: 80px;
    border-radius: 50%;
    margin-bottom: 10px;
  }

  .close {
    float: right;
    font-size: 22px;
    cursor: pointer;
  }
</style>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", function () {
    const listName = "rapidorg";
    const siteUrl = _spPageContextInfo.webAbsoluteUrl;

    function getData(callback) {
      const url = `${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,JobTitle,Manager,ImageUrl,Bio&$top=5000`;
      fetch(url, {
        method: "GET",
        headers: {
          "Accept": "application/json;odata=verbose"
        }
      })
      .then(res => res.json())
      .then(data => {
        const items = data.d.results;
        callback(items);
      });
    }

    function buildHierarchy(data) {
      const map = {}, roots = [];

      data.forEach(person => {
        person.children = [];
        map[person.Title] = person;
      });

      data.forEach(person => {
        if (person.Manager) {
          const manager = map[person.Manager];
          if (manager) manager.children.push(person);
        } else {
          roots.push(person);
        }
      });

      return roots;
    }

    function createCard(person) {
      const card = document.createElement("div");
      card.className = "tree-card";
      card.onclick = () => showModal(person);
      card.innerHTML = `
        <img src="${person.ImageUrl || 'https://via.placeholder.com/40'}" />
        <h4>${person.Title}</h4>
        <p>${person.JobTitle || ''}</p>
      `;
      return card;
    }

    function renderNode(person) {
      const container = document.createElement("div");
      container.className = "tree-node";

      const card = createCard(person);
      container.appendChild(card);

      if (person.children.length > 0) {
        person.children.sort((a, b) => a.Title.localeCompare(b.Title));
        const childrenWrapper = document.createElement("div");
        childrenWrapper.className = "children-container";

        const connector = document.createElement("div");
        connector.className = "connector-line";
        childrenWrapper.appendChild(connector);

        person.children.forEach(child => {
          childrenWrapper.appendChild(renderNode(child));
        });

        container.appendChild(childrenWrapper);
      }

      return container;
    }

    function renderOrgChart(data) {
      const tree = buildHierarchy(data);

      const executive = tree.find(p => !p.Manager);
      const managerContainer = document.createElement("div");
      managerContainer.className = "manager-row";

      const chartContainer = document.getElementById("orgChart");
      chartContainer.innerHTML = "";

      if (executive) {
        const execNode = renderNode(executive);
        chartContainer.appendChild(execNode);

        executive.children.forEach(manager => {
          const managerNode = renderNode(manager);
          managerContainer.appendChild(managerNode);
        });

        chartContainer.appendChild(managerContainer);
      }
    }

    function showModal(person) {
      document.getElementById("modalImage").src = person.ImageUrl || 'https://via.placeholder.com/80';
      document.getElementById("modalName").textContent = person.Title;
      document.getElementById("modalTitle").textContent = person.JobTitle;
      document.getElementById("modalBio").textContent = person.Bio || "No bio available.";
      document.getElementById("bioModal").style.display = "block";
    }

    document.querySelector(".close").onclick = () => {
      document.getElementById("bioModal").style.display = "none";
    };

    window.onclick = function (e) {
      if (e.target === document.getElementById("bioModal")) {
        document.getElementById("bioModal").style.display = "none";
      }
    };

    getData(renderOrgChart);
  });
</script>
