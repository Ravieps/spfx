<div id="orgChart" style="text-align:center;"></div>

<!-- Bio Modal -->
<div id="bioModal" style="display:none;position:fixed;z-index:9999;left:0;top:0;width:100%;height:100%;overflow:auto;background-color:rgba(0,0,0,0.7);">
  <div style="background-color:#fff;margin:10% auto;padding:20px;border:1px solid #888;width:300px;border-radius:10px;position:relative;">
    <span class="close" style="position:absolute;top:10px;right:20px;font-size:22px;font-weight:bold;cursor:pointer;">×</span>
    <img id="modalImage" src="" style="width:80px;height:80px;border-radius:50%;margin-bottom:10px;" />
    <h3 id="modalName" style="margin:0;"></h3>
    <p id="modalTitle" style="margin:0;font-style:italic;"></p>
    <hr>
    <p id="modalBio" style="font-size:14px;"></p>
  </div>
</div>

<style>
  .tree-node {
    text-align: center;
    position: relative;
  }

  .tree-node::before {
    content: "";
    position: absolute;
    top: 0;
    left: 50%;
    border-left: 1px solid #ccc;
    height: 20px;
    transform: translateX(-50%);
  }

  .tree-root > .tree-node::before {
    display: none;
  }

  .tree-card {
    background: #f0f4f7;
    padding: 10px 10px 10px 50px;
    border-radius: 8px;
    border: 1px solid #ccc;
    min-width: 180px;
    max-width: 200px;
    display: inline-block;
    text-align: left;
    cursor: pointer;
    position: relative;
    transition: all 0.3s ease;
  }

  .tree-card:hover {
    background: #e4efff;
  }

  .tree-card img {
    position: absolute;
    left: 10px;
    top: 10px;
    width: 40px;
    height: 40px;
    border-radius: 50%;
  }

  .tree-card h4 {
    margin: 0;
    font-size: 16px;
    font-weight: bold;
  }

  .tree-card p {
    margin: 2px 0 0;
    font-size: 13px;
    color: #333;
  }

  .children-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 40px;
    margin-top: 40px;
    position: relative;
  }

  .manager-row {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 40px;
    margin-top: 40px;
    position: relative;
  }

  .children-container::before,
  .manager-row::before {
    content: "";
    position: absolute;
    top: -20px;
    left: 50%;
    height: 20px;
    border-left: 1px solid #ccc;
  }

  .tree-branch {
    position: relative;
    padding-top: 20px;
  }

  .tree-branch::before {
    content: "";
    position: absolute;
    top: 0;
    left: 50%;
    border-top: 1px solid #ccc;
    width: 100%;
    height: 1px;
    transform: translateX(-50%);
  }

  .children-container.collapsed,
  .manager-row.collapsed {
    display: none !important;
  }

  .toggle-icon {
    content: '+';
    position: absolute;
    bottom: -12px;
    left: 50%;
    transform: translateX(-50%);
    background: #0b2e59;
    color: white;
    padding: 2px 6px;
    border-radius: 10px;
    font-size: 12px;
    cursor: pointer;
    z-index: 10;
  }

  .reportee-count {
    position: absolute;
    top: 4px;
    right: 6px;
    background: #f44336;
    color: white;
    font-size: 11px;
    padding: 2px 6px;
    border-radius: 12px;
  }
</style>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", function () {
    const listName = "rapidorg";
    const siteUrl = _spPageContextInfo.webAbsoluteUrl;

    function getData(callback) {
      const url = `${siteUrl}/_api/web/lists/getbytitle('${listName}')/items?$select=Title,JobTitle,Manager,ImageUrl,Bio&$top=5000`;
      fetch(url, {
        method: "GET",
        headers: { "Accept": "application/json;odata=verbose" }
      })
      .then(res => res.json())
      .then(data => callback(data.d.results));
    }

    function buildHierarchy(data) {
      const map = {}, roots = [];
      data.forEach(person => { person.children = []; map[person.Title] = person; });
      data.forEach(person => {
        if (person.Manager) {
          const mgr = map[person.Manager];
          if (mgr) mgr.children.push(person);
        } else {
          roots.push(person);
        }
      });
      return roots;
    }

    function createCard(person, isManager = false, childrenWrapper = null) {
      const card = document.createElement("div");
      card.className = "tree-card";

      const countBadge = isManager && person.children.length > 0
        ? `<div class="reportee-count">${person.children.length}</div>` : '';

      card.innerHTML = `
        ${countBadge}
        <img src="${person.ImageUrl || 'https://via.placeholder.com/40'}" />
        <h4>${person.Title}</h4>
        <p>${person.JobTitle || ''}</p>
      `;

      card.addEventListener("click", () => showModal(person));
      return card;
    }

    function renderNode(person, options = {}) {
      const { collapseByDefault = false, verticalLayout = true, isRoot = false } = options;
      const wrapper = document.createElement("div");
      wrapper.className = "tree-node";
      if (isRoot) wrapper.classList.add("tree-root");

      const isManager = person.children.length > 0;
      const cardWrapper = document.createElement("div");
      const card = createCard(person, isManager);

      const node = document.createElement("div");
      node.className = "tree-branch";
      node.appendChild(card);

      if (isManager) {
        const toggle = document.createElement("div");
        toggle.className = "toggle-icon";
        toggle.textContent = collapseByDefault ? '+' : '−';

        const childContainer = document.createElement("div");
        childContainer.className = verticalLayout ? "children-container" : "manager-row";
        if (collapseByDefault) {
          childContainer.classList.add("collapsed");
        }

        person.children.sort((a, b) => a.Title.localeCompare(b.Title));
        person.children.forEach(child => {
          childContainer.appendChild(renderNode(child, {
            collapseByDefault: true,
            verticalLayout: true
          }));
        });

        toggle.addEventListener("click", function (e) {
          e.stopPropagation();
          childContainer.classList.toggle("collapsed");
          toggle.textContent = childContainer.classList.contains("collapsed") ? '+' : '−';
        });

        node.appendChild(toggle);
        wrapper.appendChild(node);
        wrapper.appendChild(childContainer);
      } else {
        wrapper.appendChild(node);
      }

      return wrapper;
    }

    function renderChart(data) {
      const tree = buildHierarchy(data);
      const executive = tree.find(p => !p.Manager);
      const chartContainer = document.getElementById("orgChart");
      chartContainer.innerHTML = "";

      if (executive) {
        const execNode = renderNode(executive, {
          collapseByDefault: false,
          verticalLayout: false,
          isRoot: true
        });
        chartContainer.appendChild(execNode);
      }
    }

    function showModal(person) {
      document.getElementById("modalImage").src = person.ImageUrl || 'https://via.placeholder.com/80';
      document.getElementById("modalName").textContent = person.Title;
      document.getElementById("modalTitle").textContent = person.JobTitle || '';
      document.getElementById("modalBio").textContent = person.Bio || "No bio available.";
      document.getElementById("bioModal").style.display = "block";
    }

    document.querySelector(".close").onclick = () => {
      document.getElementById("bioModal").style.display = "none";
    };

    window.onclick = function (e) {
      if (e.target === document.getElementById("bioModal")) {
        document.getElementById("bioModal").style.display = "none";
      }
    };

    getData(renderChart);
  });
</script>
